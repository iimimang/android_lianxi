package com.wyj.Activity;

import java.util.ArrayList;
import java.util.HashMap;

import java.util.List;
import java.util.Map;


import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;

import com.wyj.adapter.ListTempleNameAdapter;
import com.wyj.dataprocessing.AsynTaskHelper;
import com.wyj.dataprocessing.BitmapManager;
import com.wyj.dataprocessing.JsonToListHelper;
import com.wyj.dataprocessing.AsynTaskHelper.OnDataDownloadListener;

import com.wyj.http.WebApiUrl;
import com.wyj.Activity.R;

import com.wyj.utils.Tools;

import android.annotation.SuppressLint;
import android.app.Activity;

import android.content.Context;

import android.content.Intent;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;

import android.os.Bundle;

import android.util.Log;
import android.view.LayoutInflater;

import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;

import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.LinearLayout;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.Spinner;
import android.widget.Switch;

import android.widget.TextView;

import android.widget.Toast;

public class Find extends Activity {
	


	private TextView daochang_select_showname;
	private LinearLayout daochang_select;
	private List<Map<String, Object>> daochang_data; // 加载到适配器中的数据源
	private int tid = 0; // 道场id的标识

	private View moreView;
	private ListView mListView;
	private List<Map<String, Object>> Listdata; // 加载到适配器中的数据源
	private BaseListAdapter mAdapter;
	private int page = 1;
	private int pagesize = 30;
	private boolean isBottom = false;// 判断是否滚动到数据最后一条
	private int lastItemId;
	private int count;
	private PullToRefreshListView mPullRefreshListView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		Listdata = new ArrayList<Map<String, Object>>();
		View contenView = LayoutInflater.from(this.getParent()).inflate(
				R.layout.tab_find, null);

		setContentView(contenView);

		int detail_tid = getIntent().getIntExtra("tid", 0);

		if (detail_tid != 0) {
			tid = detail_tid; // 详情页面返回寺庙的传值
		}
		
		
		ActivityfindViewById();
		ActivityAction();
		select_order_list();

	}
	
	private void ActivityfindViewById() {
		// TODO Auto-generated method stub
		
		daochang_select =(LinearLayout) findViewById(R.id.daochang_select);
		daochang_select_showname= (TextView) findViewById(R.id.daochang_select_showname);
		default_order_list();
	}
	
	private void ActivityAction() {
		// TODO Auto-generated method stub
		daochang_select.setOnClickListener(new View.OnClickListener() {
					
					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						
						
						if(daochang_data!=null){
							new MyPopupWindows(Find.this,v,getParent().getParent(),daochang_data);	
						}else{
						    get_daochang_list(null, WebApiUrl.GET_TEMPLELIST, getParent(),v);
						}
						
						
					}
				});
	}


	private void get_daochang_list(Map<String, Object> map, String url,
			final Context context,final View v) {

		
		AsynTaskHelper asyntask = new AsynTaskHelper();
		asyntask.dataDownload(url, map, new OnDataDownloadListener() {
			@Override
			public void onDataDownload(String result) {
				if (result != null) {
					// Listdata.clear();
					List<Map<String, Object>> items;

					items = JsonToListHelper.gettemplelist_json(result);
					daochang_data=new ArrayList<Map<String,Object>>(); 
					Map<String, Object> map = new HashMap<String, Object>(){{put("templeid", 0);put("templename", "全部道场");}};
					daochang_data.add(map);
					daochang_data.addAll(items);
					//daochang_data =items;
					// 初始化------------------------------------

					// 初始化下拉选项------------------------------------
					
			new MyPopupWindows(Find.this,v,getParent().getParent(),daochang_data);

				} else {
					Toast.makeText(context, "网络异常", Toast.LENGTH_SHORT).show();
				}

			}
		}, context, "GET");

	}



	private void default_order_list() { // 默认加载 和更换道场加载

		if (isBottom) {
			isBottom = false;
		}

		page = 1;
		Listdata.clear();
		

		listAdapter(null, WebApiUrl.GET_ORDERLIST + "?p=" + page + "&&pz="
				+ pagesize + "&&tid=" + tid, getParent()); // 默认加载第一页
	}

	private void select_order_list() {
		// TODO Auto-generated method stub
		mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.find_list);
		// 设置底部加载的字幕

		mPullRefreshListView.setMode(Mode.BOTH); // 支持上拉和下拉操作
		mPullRefreshListView.getLoadingLayoutProxy(false, true).setPullLabel(
				"加载中");
		mPullRefreshListView.getLoadingLayoutProxy(false, true)
				.setRefreshingLabel("正在加载");
		mPullRefreshListView.getLoadingLayoutProxy(false, true)
				.setReleaseLabel("上拉加载");

		// 下拉更新时间
		mPullRefreshListView
				.setOnRefreshListener(new OnRefreshListener2<ListView>() {

					@Override
					public void onPullDownToRefresh(
							PullToRefreshBase<ListView> refreshView) {
						// Do work to refresh the list here.
						// new
						// GetDataTask().execute(WebApiUrl.GET_ORDERLIST+"?p=5&&pz=1");
						pull_listAdapter(null, WebApiUrl.GET_ORDERLIST
								+ "?p=1&&pz=100&&tid=7", getParent());

					}

					@Override
					public void onPullUpToRefresh(
							PullToRefreshBase<ListView> refreshView) {

						if (!isBottom) {
							page++;
							morelistAdapter(null, WebApiUrl.GET_ORDERLIST
									+ "?p=" + page + "&&pz=" + pagesize
									+ "&&tid=" + tid, getParent());
						} else {
							

							Toast.makeText(getParent(), "没有了",
									Toast.LENGTH_SHORT).show();
							mPullRefreshListView.onRefreshComplete();

						}

					}
				});

		mListView = mPullRefreshListView.getRefreshableView();

		// mListView = (ListView) findViewById(R.id.find_list);
		mAdapter = new BaseListAdapter(getBaseContext(), Listdata);
		mListView.setAdapter(mAdapter);

		mPullRefreshListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				// String data = arg0.getItemAtPosition(arg2).toString();

				Integer orderid = (Integer) Listdata.get(arg2 - 1).get(
						"orderid");
				// 要跳转的Activity
				Intent intent = new Intent(Find.this, Find_item.class);

				Bundle bu = new Bundle(); // 这个组件 存值
				bu.putInt("orderid", orderid);
				bu.putInt("tid", tid);
				intent.putExtras(bu); // 放到 intent 里面 然后 传出去
				// 把Activity转换成一个Window，然后转换成View
				Log.i("bbbb", "------传了没传啊----" + orderid);
				FindGroupTab.getInstance().switchActivity("Find_item", intent,
						-1, -1);
			}
		});
	}

	private void listAdapter(Map<String, Object> map, String url,
			final Context context) {
		AsynTaskHelper asyntask = new AsynTaskHelper();
		asyntask.dataDownload(url, map, new OnDataDownloadListener() {

			@Override
			public void onDataDownload(String result) {
				if (result != null) {

					List<Map<String, Object>> items;
					items = JsonToListHelper.orderlist_json(result);

					Listdata.addAll(items);
					count = Listdata.size();
					mListView.setAdapter(mAdapter);
					mAdapter.notifyDataSetChanged();

					if (items.toString().equals("[]")) {
						isBottom = true;
					} else {
						lastItemId = (Integer) items.get(0).get("orderid");
					}

				} else {
					Toast.makeText(context, "网络异常", Toast.LENGTH_SHORT).show();
				}

			}
		}, context, "GET");
	}

	// 上拉加载操作-------
	private void morelistAdapter(Map<String, Object> map, String url,
			final Context context) {
		AsynTaskHelper asyntask = new AsynTaskHelper();
		asyntask.more_dataDownload(url, map, new OnDataDownloadListener() {

			@Override
			public void onDataDownload(String result) {
				if (result != null) {
					// Listdata.clear();
					List<Map<String, Object>> items;
					items = JsonToListHelper.orderlist_json(result);
					Listdata.addAll(items);
					count = Listdata.size();
					mAdapter.notifyDataSetChanged();

					if (items.toString().equals("[]")) {
						Toast.makeText(getParent(), "没有了", Toast.LENGTH_SHORT)
								.show();
						mPullRefreshListView.onRefreshComplete();
						isBottom = true;
					}

				} else {
					Toast.makeText(context, "网络异常", Toast.LENGTH_SHORT).show();
				}

			}
		}, context, "GET", mPullRefreshListView);
	}

	// 下拉更新操作-------
	private void pull_listAdapter(Map<String, Object> map, String url,
			final Context context) {
		AsynTaskHelper asyntask = new AsynTaskHelper();
		asyntask.pull_dataDownload(url, map, new OnDataDownloadListener() {

			@Override
			public void onDataDownload(String result) {
				if (result != null) {
					// Listdata.clear();
					List<Map<String, Object>> items;
					items = JsonToListHelper.orderlist_json(result);

					// Log.i("bbbb","------上拉如果没有数据的时候-----"+items.toString());
					if (items.toString().equals("[]")) {
						mPullRefreshListView.onRefreshComplete();
						Toast.makeText(context, "没有最新的啦", Toast.LENGTH_SHORT)
								.show();
					} else {

						lastItemId = (Integer) items.get(0).get("orderid");
						Listdata.addAll(0, items);
						mAdapter.notifyDataSetChanged();
						mPullRefreshListView.onRefreshComplete();
					}

				} else {
					Toast.makeText(context, "网络异常", Toast.LENGTH_SHORT).show();
				}

			}
		}, context, "GET");

	}

	

	private class BaseListAdapter extends BaseAdapter implements OnClickListener{

		private Context mContext;
		private LayoutInflater inflater;
		private List<Map<String, Object>> mData;

		public BaseListAdapter(Context mContext, List<Map<String, Object>> list) {
			this.mContext = mContext;
			inflater = LayoutInflater.from(mContext);
			this.mData = list;
		}


		@Override
		public int getCount() {
			return this.mData.size();
		}

		@Override
		public Object getItem(int position) {
			return position;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder viewHolder = null;
			if (convertView == null) {
				viewHolder = new ViewHolder();
				convertView = inflater.inflate(R.layout.list_find_items, null);

				viewHolder.list_find_headface = (ImageView) convertView.findViewById(R.id.list_find_headface);
				viewHolder.list_find_content = (TextView) convertView
						.findViewById(R.id.list_find_content);
				viewHolder.list_find_username = (TextView) convertView
						.findViewById(R.id.list_find_username);
				viewHolder.list_find_address = (TextView) convertView
						.findViewById(R.id.list_find_address);
				viewHolder.list_find_jiachi = (TextView) convertView
						.findViewById(R.id.list_find_jiachi);
				
				viewHolder.list_find_zan = (TextView) convertView
						.findViewById(R.id.list_find_zan);
 
				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}

			// viewHolder.img.setBackgroundResource(R.drawable.foot_07);
			BitmapManager.getInstance().loadBitmap(
					(String) this.mData.get(position).get("headface"),
					viewHolder.list_find_headface,
					Tools.readBitmap(Find.this, R.drawable.foot_07));

			viewHolder.list_find_content.setText((CharSequence) this.mData.get(position)
					.get("wishtext"));
			viewHolder.list_find_username.setText((CharSequence) this.mData.get(position)
					.get("wishname"));
			
			
			String findaddress="刚刚在"+(String) this.mData.get(position).get("templename")+(String) this.mData.get(position).get("alsowish")+(String) this.mData.get(position).get("wishtype");
			
			int co_blessings=(Integer) this.mData.get(position).get("co_blessings");
			String jiachipeople="";
			if(co_blessings>0){
				 jiachipeople=(String) this.mData.get(position).get("name_blessings")+"等"+co_blessings+"人加持";
			}
			viewHolder.list_find_address.setText(findaddress);
			viewHolder.list_find_jiachi.setText(jiachipeople);

			viewHolder.list_find_zan.setOnClickListener(this);

			return convertView;
		}

		class ViewHolder {
			ImageView list_find_headface;
			TextView list_find_content;
			TextView list_find_username;
			TextView list_find_address;
			TextView list_find_jiachi;
			
			TextView list_find_zan;

		}

		
		
		public void onClick(View v) {
		 // TODO Auto-generated method stub
		    switch (v.getId()) {
			case R.id.list_find_zan:
				
				TextView list_find_zany=(TextView) v;
				
				Resources resource = (Resources) getBaseContext().getResources();
				ColorStateList csl = (ColorStateList) resource
						.getColorStateList(R.color.color_text_selected);
				list_find_zany.setTextColor(csl);
				Drawable drawable= getResources().getDrawable(R.drawable.load_hover);
				/// 这一步必须要做,否则不会显示.
				drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());
				list_find_zany.setCompoundDrawables(drawable, null, null, null);
				break;

			default:
				break;
			}
		
		 }

	}
	
	
	public class MyPopupWindows extends PopupWindow {
		
		private PopupWindow popupwindow;
		private ListTempleNameAdapter adapterListTemple;
		
		public MyPopupWindows(Context mContext,  View parent, final Activity activity, final List<Map<String, Object>> items) {
			
			final Activity pactivity=activity;
			
			View customView = View.inflate(mContext, R.layout.popview_item,
					null);
			ListView List = (ListView) customView
					.findViewById(R.id.popview_discover_container);
			
			adapterListTemple = new ListTempleNameAdapter(
					Find.this, items);
			List.setAdapter(adapterListTemple);
			
			
			popupwindow = new PopupWindow(customView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, true);			
			 //以下为弹窗后面的背景色设置
		 	ColorDrawable cd = new ColorDrawable(0x000000);
		 	popupwindow.setBackgroundDrawable(cd); 
		   	//产生背景变暗效果
		    WindowManager.LayoutParams lp=activity.getWindow().getAttributes(); 
			lp.alpha = 0.7f;
			activity.getWindow().setAttributes(lp);
			
			popupwindow.setWidth(LayoutParams.FILL_PARENT);
			popupwindow.setHeight(LayoutParams.FILL_PARENT);
			popupwindow.setBackgroundDrawable(new BitmapDrawable());
			popupwindow.setFocusable(true);
			popupwindow.setOutsideTouchable(true);
			popupwindow.setContentView(customView);

			int[] location = new int[2];
			parent.getLocationOnScreen(location);

			popupwindow.showAsDropDown(parent); //显示在button的下面

			// 自定义view添加触摸事件
			popupwindow.update();
			popupwindow.setOnDismissListener(new OnDismissListener() {		//恢复背景色
				
				public void onDismiss() {
					// TODO Auto-generated method stub
					WindowManager.LayoutParams lp=pactivity.getWindow().getAttributes();
	    			lp.alpha = 1f;
	    			pactivity.getWindow().setAttributes(lp);
				}
			});
			
			List.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> arg0, View arg1,
						int arg2, long arg3) {
					// TODO Auto-generated method stub
					
					
					 tid = (Integer) items.get(arg2).get("templeid");
					 default_order_list();
					 daochang_select_showname.setText((String) items.get(arg2).get("templename"));
					 popupwindow.dismiss();
				}
			});
			adapterListTemple.notifyDataSetChanged();
			
			customView.setOnTouchListener(new OnTouchListener() {

				@Override
				public boolean onTouch(View v, MotionEvent event) {
					if (popupwindow != null && popupwindow.isShowing()) {
						popupwindow.dismiss();
						popupwindow = null;
					}

					return false;
				}
			});		
		}
	}
	
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			FindGroupTab.getInstance().onKeyDown(keyCode, event);
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

}
