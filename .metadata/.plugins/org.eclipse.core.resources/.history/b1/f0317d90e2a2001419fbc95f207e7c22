package com.example.activity;

import java.util.Calendar;

import com.example.spinnerwheel.AbstractWheel;
import com.example.spinnerwheel.AbstractWheelTextAdapter;
import com.example.spinnerwheel.OnWheelChangedListener;
import com.example.spinnerwheel.OnWheelScrollListener;
import com.shangxiang.android.R;
import com.shangxiang.android.BaseFragment;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

public class CreateEvent extends BaseFragment {
	private Button buttonBack;
	private Button buttonSave;

	private TextView buttonShowDateSelect;
	private Button buttonHideDateSelect;
	private LinearLayout layoutDateSelect;

	private TextView buttonShowRemindSelect;
	private Button buttonHideRemindSelect;
	private LinearLayout layoutRemindSelect;

	private boolean scrolling = false;

	@SuppressLint("InflateParams")
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sinha) {
		View view = inflater.inflate(R.layout.create_event, null);

		this.buttonBack = (Button) view.findViewById(R.id.create_event_title_back_button);
		this.buttonBack.setOnClickListener(this);
		this.buttonSave = (Button) view.findViewById(R.id.create_event_title_save_button);
		this.buttonSave.setOnClickListener(this);

		this.buttonShowDateSelect = (TextView) view.findViewById(R.id.create_event_show_select_date_button);
		this.buttonShowDateSelect.setOnClickListener(this);
		this.buttonHideDateSelect = (Button) view.findViewById(R.id.create_event_hide_select_date_button);
		this.buttonHideDateSelect.setOnClickListener(this);
		this.layoutDateSelect = (LinearLayout) view.findViewById(R.id.create_event_select_date_layout);

		this.buttonShowRemindSelect = (TextView) view.findViewById(R.id.create_event_show_select_remind_button);
		this.buttonShowRemindSelect.setOnClickListener(this);
		this.buttonHideRemindSelect = (Button) view.findViewById(R.id.create_event_hide_select_remind_button);
		this.buttonHideRemindSelect.setOnClickListener(this);
		this.layoutRemindSelect = (LinearLayout) view.findViewById(R.id.create_event_select_remind_layout);

		return view;
	}

	public void onActivityCreated(Bundle sinha) {
		super.onActivityCreated(sinha);
		
		final Calendar calendar = Calendar.getInstance();

		final AbstractWheel dateMonthSelect = (AbstractWheel) getActivity().findViewById(R.id.create_event_select_date_month_view);
		final AbstractWheel dateDaySelect = (AbstractWheel) getActivity().findViewById(R.id.create_event_select_date_day_view);
		final AbstractWheel dateHourSelect = (AbstractWheel) getActivity().findViewById(R.id.create_event_select_date_hour_view);
		final AbstractWheel dateMinuteSelect = (AbstractWheel) getActivity().findViewById(R.id.create_event_select_date_minute_view);

		DateMonthAdapter dateMonthAdapter = new DateMonthAdapter(getActivity());
		dateMonthSelect.setViewAdapter(dateMonthAdapter);
		dateMonthSelect.addScrollingListener(new OnWheelScrollListener() {
			public void onScrollingStarted(AbstractWheel wheel) {
				scrolling = true;
			}

			public void onScrollingFinished(AbstractWheel wheel) {
				scrolling = false;
				calendar.set(calendar.get(Calendar.YEAR), dateMonthSelect.getCurrentItem(), 1);
				DateDayAdapter dateDayAdapter = new DateDayAdapter(getActivity());
				dateDayAdapter.dayCount = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
				dateDaySelect.setViewAdapter(dateDayAdapter);
				dateDaySelect.setCurrentItem(calendar.get(Calendar.DAY_OF_MONTH) - 1);
			}
		});
		dateMonthSelect.addChangingListener(new OnWheelChangedListener() {
			public void onChanged(AbstractWheel wheel, int oldValue, int newValue) {
				if (!scrolling) {
					calendar.set(calendar.get(Calendar.YEAR), dateMonthSelect.getCurrentItem(), 1);
					DateDayAdapter dateDayAdapter = new DateDayAdapter(getActivity());
					dateDayAdapter.dayCount = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					dateDaySelect.setViewAdapter(dateDayAdapter);
					dateDaySelect.setCurrentItem(calendar.get(Calendar.DAY_OF_MONTH) - 1);
				}
			}
		});
		
		DateDayAdapter dateDayAdapter = new DateDayAdapter(getActivity());
		dateDayAdapter.dayCount = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
		dateDaySelect.setViewAdapter(dateDayAdapter);
		
		DateHourAdapter dateHourAdapter = new DateHourAdapter(getActivity());
		dateHourSelect.setViewAdapter(dateHourAdapter);
		
		DateMinuteAdapter dateMinuteAdapter = new DateMinuteAdapter(getActivity());
		dateMinuteSelect.setViewAdapter(dateMinuteAdapter);
		
		dateMonthSelect.setCurrentItem(calendar.get(Calendar.MONTH));
		dateDaySelect.setCurrentItem(calendar.get(Calendar.DAY_OF_MONTH) - 1);
		dateHourSelect.setCurrentItem(calendar.get(Calendar.HOUR_OF_DAY) - 1);
		dateMinuteSelect.setCurrentItem(calendar.get(Calendar.MINUTE) - 1);

		final AbstractWheel remindSelect = (AbstractWheel) getActivity().findViewById(R.id.create_event_select_remind_view);
		RemindAdapter remindAdapter = new RemindAdapter(getActivity());
		remindAdapter.reminds = new String[] { "一个月", "十五天", "十天", "准点提醒", "五分钟", "一小时" };
		remindSelect.setViewAdapter(remindAdapter);
		remindSelect.setCurrentItem(3);
	}

	private class DateMonthAdapter extends AbstractWheelTextAdapter {
		String[] months = new String[] { "正月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "腊月" };
		
		protected DateMonthAdapter(Context context) {
			super(context, R.layout.select_custom_text, NO_RESOURCE);
		}

		@Override
		public int getItemsCount() {
			return 12;
		}

		@Override
		protected CharSequence getItemText(int index) {
			return "";
		}

		@Override
		public View getItem(int index, View cachedView, ViewGroup parent) {
			View view = super.getItem(index, cachedView, parent);
			TextView monthView = (TextView) view.findViewById(R.id.select_custom_text);
			monthView.setText(months[index]);
			return view;
		}
	}

	private class DateDayAdapter extends AbstractWheelTextAdapter {
		String[] days = new String[] { "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "廿十", "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十", "三一" };
		int dayCount = 31;
		
		protected DateDayAdapter(Context context) {
			super(context, R.layout.select_custom_text, NO_RESOURCE);
		}

		@Override
		public int getItemsCount() {
			return dayCount;
		}

		@Override
		protected CharSequence getItemText(int index) {
			return "";
		}

		@Override
		public View getItem(int index, View cachedView, ViewGroup parent) {
			View view = super.getItem(index, cachedView, parent);
			TextView monthView = (TextView) view.findViewById(R.id.select_custom_text);
			monthView.setText(days[index]);
			return view;
		}
	}

	private class DateHourAdapter extends AbstractWheelTextAdapter {
		String[] hours = new String[] { "子时0点", "丑时1点", "丑时2点", "寅时3点", "寅时4点", "卯时5点", "卯时6点", "辰时7点", "辰时8点", "巳时9点", "巳时10点", "午时11点", "午时12点", "未时13点", "未时14点", "申时15点", "申时16点", "酉时17点", "酉时18点", "戌时19点", "戌时20点", "亥时21点", "亥时22点", "子时23点" };
		
		protected DateHourAdapter(Context context) {
			super(context, R.layout.select_custom_text, NO_RESOURCE);
		}

		@Override
		public int getItemsCount() {
			return 24;
		}

		@Override
		protected CharSequence getItemText(int index) {
			return "";
		}

		@Override
		public View getItem(int index, View cachedView, ViewGroup parent) {
			View view = super.getItem(index, cachedView, parent);
			TextView yearView = (TextView) view.findViewById(R.id.select_custom_text);
			yearView.setText(hours[index]);
			return view;
		}
	}

	private class DateMinuteAdapter extends AbstractWheelTextAdapter {
		protected DateMinuteAdapter(Context context) {
			super(context, R.layout.select_custom_text, NO_RESOURCE);
		}

		@Override
		public int getItemsCount() {
			return 60;
		}

		@Override
		protected CharSequence getItemText(int index) {
			return "";
		}

		@Override
		public View getItem(int index, View cachedView, ViewGroup parent) {
			View view = super.getItem(index, cachedView, parent);
			TextView yearView = (TextView) view.findViewById(R.id.select_custom_text);
			yearView.setText((index + 1) + "分");
			return view;
		}
	}

	private class RemindAdapter extends AbstractWheelTextAdapter {
		String[] reminds = new String[] {};

		protected RemindAdapter(Context context) {
			super(context, R.layout.select_custom_text, NO_RESOURCE);
		}

		@Override
		public int getItemsCount() {
			return reminds.length;
		}

		@Override
		protected CharSequence getItemText(int index) {
			return "";
		}

		@Override
		public View getItem(int index, View cachedView, ViewGroup parent) {
			View view = super.getItem(index, cachedView, parent);
			TextView remindView = (TextView) view.findViewById(R.id.select_custom_text);
			remindView.setText(this.reminds[index]);
			return view;
		}
	}

	@Override
	public void onClick(View v) {
		if (v == this.buttonBack) {
			getActivity().onBackPressed();
		}
		if (v == this.buttonSave) {
		}
		if (v == this.buttonShowDateSelect) {
			this.layoutDateSelect.setVisibility(View.VISIBLE);
		}
		if (v == this.buttonHideDateSelect) {
			this.layoutDateSelect.setVisibility(View.GONE);
		}
		if (v == this.buttonShowRemindSelect) {
			this.layoutRemindSelect.setVisibility(View.VISIBLE);
		}
		if (v == this.buttonHideRemindSelect) {
			this.layoutRemindSelect.setVisibility(View.GONE);
		}
	}
}